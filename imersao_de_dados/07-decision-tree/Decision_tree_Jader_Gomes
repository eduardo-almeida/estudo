{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercicio de Decision Tree\n",
    "\n",
    "Jader Gomes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#bibliotecas\n",
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import math\n",
    "from sklearn.tree import DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>buying</th>\n",
       "      <th>maint</th>\n",
       "      <th>doors</th>\n",
       "      <th>persons</th>\n",
       "      <th>lug_boot</th>\n",
       "      <th>safety</th>\n",
       "      <th>class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>low</td>\n",
       "      <td>low</td>\n",
       "      <td>5more</td>\n",
       "      <td>more</td>\n",
       "      <td>small</td>\n",
       "      <td>high</td>\n",
       "      <td>good</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>high</td>\n",
       "      <td>high</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>big</td>\n",
       "      <td>high</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>low</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>4</td>\n",
       "      <td>more</td>\n",
       "      <td>big</td>\n",
       "      <td>low</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>high</td>\n",
       "      <td>high</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>small</td>\n",
       "      <td>low</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>vhigh</td>\n",
       "      <td>vhigh</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>big</td>\n",
       "      <td>med</td>\n",
       "      <td>unacc</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  buying  maint  doors persons lug_boot safety  class\n",
       "0    low    low  5more    more    small   high   good\n",
       "1   high   high      4       2      big   high  unacc\n",
       "2    low  vhigh      4    more      big    low  unacc\n",
       "3   high   high      2       4    small    low  unacc\n",
       "4  vhigh  vhigh      4       4      big    med  unacc"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "headers = [\"buying\", \"maint\", \"doors\", \"persons\",\"lug_boot\", \"safety\", \"class\"]\n",
    "dataset = pd.read_csv(\"car_data.csv\", header=None, names=headers)\n",
    "\n",
    "dataset = dataset.sample(frac=1).reset_index(drop=True) \n",
    "\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>buying</th>\n",
       "      <th>maint</th>\n",
       "      <th>doors</th>\n",
       "      <th>persons</th>\n",
       "      <th>lug_boot</th>\n",
       "      <th>safety</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>class</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       buying  maint  doors  persons  lug_boot  safety\n",
       "class                                                 \n",
       "1           1      1      3        2         2       0\n",
       "2           0      0      2        0         0       0\n",
       "2           1      3      2        2         0       1\n",
       "2           0      0      0        1         2       1\n",
       "2           3      3      2        1         0       2"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Transformando os dados categóricos(small, med, low, ...) em numéricos\n",
    "for h in headers:\n",
    "    dataset[h] = dataset[h].astype('category')\n",
    "    dataset[h] = dataset[h].cat.codes\n",
    "\n",
    "dataset.set_index(\"class\", inplace=True)\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       buying  maint  doors  persons  lug_boot  safety\n",
      "class                                                 \n",
      "1           1      1      3        2         2       0\n",
      "2           0      0      2        0         0       0\n",
      "2           1      3      2        2         0       1\n",
      "2           0      0      0        1         2       1\n",
      "2           3      3      2        1         0       2\n",
      "2           1      0      2        2         1       1\n",
      "1           2      1      0        2         0       2\n",
      "2           3      2      3        1         0       1\n",
      "2           2      1      1        0         1       1\n",
      "0           2      2      1        1         2       0\n",
      "2           2      1      1        0         0       0\n",
      "2           2      2      1        1         0       1\n",
      "2           3      0      3        1         2       2\n",
      "0           0      0      1        1         0       0\n",
      "2           3      2      0        1         1       2\n",
      "0           3      1      2        2         0       0\n",
      "2           0      1      1        0         2       1\n",
      "0           0      1      3        1         0       2\n",
      "2           2      2      1        0         1       2\n",
      "2           0      2      0        0         1       1\n",
      "3           2      2      1        1         0       0\n",
      "2           0      3      3        2         0       2\n",
      "0           2      3      3        1         2       0\n",
      "0           3      1      2        2         1       0\n",
      "2           2      0      3        0         0       0\n",
      "2           0      1      0        2         2       0\n",
      "2           3      3      1        2         2       2\n",
      "0           0      1      3        2         1       0\n",
      "2           3      1      2        2         2       2\n",
      "2           3      2      2        0         2       1\n",
      "...       ...    ...    ...      ...       ...     ...\n",
      "0           1      0      2        1         0       2\n",
      "2           1      1      1        1         0       1\n",
      "2           2      1      2        0         0       2\n",
      "0           1      3      1        2         1       0\n",
      "2           3      3      2        2         2       0\n",
      "2           3      0      0        0         0       0\n",
      "2           0      2      0        2         2       0\n",
      "2           1      3      1        0         2       1\n",
      "0           2      0      1        2         1       0\n",
      "2           3      3      2        0         2       0\n",
      "3           1      0      1        2         0       0\n",
      "0           3      1      2        1         1       0\n",
      "2           3      1      1        0         2       2\n",
      "2           0      3      1        0         2       0\n",
      "2           3      2      0        0         1       0\n",
      "0           1      0      0        2         1       0\n",
      "2           2      1      1        0         0       1\n",
      "2           0      1      0        0         1       1\n",
      "2           0      0      0        1         1       1\n",
      "2           0      3      2        1         0       0\n",
      "2           1      2      3        2         1       1\n",
      "2           2      3      3        2         0       1\n",
      "2           0      0      3        0         1       0\n",
      "2           2      3      2        2         1       1\n",
      "2           0      0      3        0         0       1\n",
      "2           3      0      0        0         0       2\n",
      "2           0      0      0        0         0       0\n",
      "0           1      3      2        1         0       0\n",
      "2           0      3      2        0         2       1\n",
      "2           0      2      1        0         1       2\n",
      "\n",
      "[1296 rows x 6 columns]\n",
      "       buying  maint  doors  persons  lug_boot  safety\n",
      "class                                                 \n",
      "2           1      2      2        1         1       1\n",
      "2           3      0      1        0         2       0\n",
      "2           0      1      3        1         0       1\n",
      "2           0      3      2        2         0       2\n",
      "2           0      0      1        0         0       0\n",
      "2           2      3      1        0         2       1\n",
      "2           3      3      0        1         1       1\n",
      "2           1      0      2        0         1       0\n",
      "2           2      0      3        2         2       1\n",
      "0           3      1      3        1         2       0\n",
      "2           3      0      1        0         0       2\n",
      "2           0      1      0        0         2       0\n",
      "2           1      3      1        0         1       1\n",
      "2           3      0      3        0         2       2\n",
      "2           0      3      3        1         0       2\n",
      "2           0      2      2        0         1       2\n",
      "2           0      1      2        2         1       1\n",
      "2           0      3      0        2         2       0\n",
      "2           1      3      0        0         1       2\n",
      "2           2      1      0        0         0       1\n",
      "0           3      1      1        1         2       0\n",
      "2           1      1      3        1         2       1\n",
      "2           0      3      1        1         2       1\n",
      "1           2      1      0        1         2       0\n",
      "2           3      2      0        0         2       0\n",
      "2           2      3      0        1         2       2\n",
      "2           1      3      3        2         1       1\n",
      "2           2      2      1        0         2       0\n",
      "2           2      1      0        0         2       2\n",
      "2           2      2      3        2         2       1\n",
      "...       ...    ...    ...      ...       ...     ...\n",
      "2           0      1      1        0         1       1\n",
      "2           1      0      1        1         2       1\n",
      "2           2      1      0        2         1       1\n",
      "2           0      2      1        1         1       2\n",
      "0           3      1      1        2         1       2\n",
      "0           3      1      1        1         0       2\n",
      "2           0      3      3        1         1       0\n",
      "2           3      0      2        1         2       0\n",
      "2           3      1      2        2         2       1\n",
      "2           2      0      2        0         2       2\n",
      "0           2      2      2        2         2       2\n",
      "2           0      2      2        0         1       1\n",
      "2           3      0      2        0         2       2\n",
      "0           1      2      2        2         2       2\n",
      "2           0      1      1        2         2       2\n",
      "0           1      0      3        2         2       0\n",
      "2           3      2      0        1         2       2\n",
      "3           1      0      1        2         1       0\n",
      "0           3      2      3        1         0       0\n",
      "1           1      2      2        1         0       2\n",
      "2           1      3      1        1         2       2\n",
      "2           3      0      2        1         0       1\n",
      "0           3      1      3        2         2       0\n",
      "0           2      0      1        1         2       0\n",
      "2           3      0      1        0         2       1\n",
      "0           0      2      3        2         1       0\n",
      "2           2      1      3        0         1       1\n",
      "2           1      1      0        2         1       1\n",
      "2           1      0      3        1         1       1\n",
      "2           1      1      3        2         0       1\n",
      "\n",
      "[432 rows x 6 columns]\n"
     ]
    }
   ],
   "source": [
    "# Dividindo o dataset\n",
    "size = len(dataset)\n",
    "train_size = int(math.floor(size * 0.75))\n",
    "train_data = dataset[:train_size]\n",
    "test_data = dataset[train_size:]\n",
    "\n",
    "print(train_data)\n",
    "print(test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n",
       "            max_features=None, max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, presort=False, random_state=None,\n",
       "            splitter='best')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Treinando a árvore de decisão com critério gini\n",
    "\n",
    "d_tree = DecisionTreeClassifier(criterion=\"gini\")\n",
    "d_tree.fit(train_data, train_data.index) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.97453703703703709"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fazendo as predições através da árvore de decisão\n",
    "d_tree.predict(test_data.iloc[:, 0:6])\n",
    "\n",
    "d_tree.score(test_data, test_data.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'graphviz'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-14-e55bb7cff3ea>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mgraphviz\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtree\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mdot_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexport_graphviz\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0md_tree\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout_file\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeature_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"buying\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"maint\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"doors\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"persons\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"lug_boot\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"safety\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"class\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mgraph\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgraphviz\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSource\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdot_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mgraph\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrender\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"car_dataset\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'graphviz'"
     ]
    }
   ],
   "source": [
    "import graphviz \n",
    "from sklearn import tree\n",
    "dot_data = tree.export_graphviz(d_tree, out_file=None, feature_names=[\"buying\", \"maint\", \"doors\", \"persons\",\"lug_boot\", \"safety\", \"class\"]) \n",
    "graph = graphviz.Source(dot_data) \n",
    "graph.render(\"car_dataset\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "QUESTAO 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='entropy', max_depth=None,\n",
       "            max_features=None, max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, presort=False, random_state=None,\n",
       "            splitter='best')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d_tree2 = DecisionTreeClassifier(criterion=\"entropy\")\n",
    "d_tree2.fit(train_data, train_data.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.98148148148148151"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d_tree2.predict(test_data.iloc[:, 0:6])\n",
    "d_tree2.score(test_data, test_data.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fb65f790ac8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "def randomForestScores(limitTrees, train_data):\n",
    "    scores = []\n",
    "    for i in range(1, limitTrees):\n",
    "        toFitTrainData = train_data\n",
    "        d_tree = RandomForestClassifier(n_estimators=i, criterion='entropy')\n",
    "        d_tree.fit(toFitTrainData, toFitTrainData.index)\n",
    "        \n",
    "        d_tree.predict(test_data.iloc[:, 0:6])\n",
    "        score = d_tree.score(test_data, test_data.index)\n",
    "        scores.append(score)\n",
    "    return scores\n",
    "\n",
    "scores = randomForestScores(11, train_data) \n",
    "\n",
    "plt.plot(range(1, 11), scores)\n",
    "plt.xlabel('trees')\n",
    "plt.ylabel('score')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
